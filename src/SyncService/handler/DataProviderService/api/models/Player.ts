/* tslint:disable */
/* eslint-disable */
/**
 * Leaderboard API
 * Leaderboard API to get all players\' data
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@leaderboard.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Player
 */
export interface Player {
    /**
     * The player ID
     * @type {string}
     * @memberof Player
     */
    id: string;
    /**
     * Place in leaderboard
     * @type {number}
     * @memberof Player
     */
    place: number;
    /**
     * The player's name
     * @type {string}
     * @memberof Player
     */
    name: string;
    /**
     * Number of games played
     * @type {number}
     * @memberof Player
     */
    gamesPlayed: number;
    /**
     * Number of wins
     * @type {number}
     * @memberof Player
     */
    wins: number;
    /**
     * Number of losses
     * @type {number}
     * @memberof Player
     */
    losses: number;
    /**
     * Player's winning rate, calculated as wins divided by total games played.
     * @type {number}
     * @memberof Player
     */
    winRate: number;
    /**
     * Overall rank string
     * @type {string}
     * @memberof Player
     */
    rank: string;
    /**
     * Overall rank value
     * @type {number}
     * @memberof Player
     */
    rankValue: number;
    /**
     * Rank solo queue tier
     * @type {string}
     * @memberof Player
     */
    tier: PlayerTierEnum;
    /**
     * Ranked solo queue division
     * @type {string}
     * @memberof Player
     */
    division: PlayerDivisionEnum;
    /**
     * Ranked solo queue league points
     * @type {number}
     * @memberof Player
     */
    leaguePoints: number;
    /**
     * Current win/loss streak
     * @type {number}
     * @memberof Player
     */
    currentStreak: number;
}


/**
 * @export
 */
export const PlayerTierEnum = {
    Empty: '',
    Iron: 'IRON',
    Bronze: 'BRONZE',
    Silver: 'SILVER',
    Gold: 'GOLD',
    Platinum: 'PLATINUM',
    Emerald: 'EMERALD',
    Diamond: 'DIAMOND',
    Master: 'MASTER',
    Grandmaster: 'GRANDMASTER',
    Challenger: 'CHALLENGER'
} as const;
export type PlayerTierEnum = typeof PlayerTierEnum[keyof typeof PlayerTierEnum];

/**
 * @export
 */
export const PlayerDivisionEnum = {
    Empty: '',
    I: 'I',
    Ii: 'II',
    Iii: 'III',
    Iv: 'IV'
} as const;
export type PlayerDivisionEnum = typeof PlayerDivisionEnum[keyof typeof PlayerDivisionEnum];


/**
 * Check if a given object implements the Player interface.
 */
export function instanceOfPlayer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "place" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "gamesPlayed" in value;
    isInstance = isInstance && "wins" in value;
    isInstance = isInstance && "losses" in value;
    isInstance = isInstance && "winRate" in value;
    isInstance = isInstance && "rank" in value;
    isInstance = isInstance && "rankValue" in value;
    isInstance = isInstance && "tier" in value;
    isInstance = isInstance && "division" in value;
    isInstance = isInstance && "leaguePoints" in value;
    isInstance = isInstance && "currentStreak" in value;

    return isInstance;
}

export function PlayerFromJSON(json: any): Player {
    return PlayerFromJSONTyped(json, false);
}

export function PlayerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Player {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'place': json['place'],
        'name': json['name'],
        'gamesPlayed': json['gamesPlayed'],
        'wins': json['wins'],
        'losses': json['losses'],
        'winRate': json['winRate'],
        'rank': json['rank'],
        'rankValue': json['rankValue'],
        'tier': json['tier'],
        'division': json['division'],
        'leaguePoints': json['leaguePoints'],
        'currentStreak': json['currentStreak'],
    };
}

export function PlayerToJSON(value?: Player | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'place': value.place,
        'name': value.name,
        'gamesPlayed': value.gamesPlayed,
        'wins': value.wins,
        'losses': value.losses,
        'winRate': value.winRate,
        'rank': value.rank,
        'rankValue': value.rankValue,
        'tier': value.tier,
        'division': value.division,
        'leaguePoints': value.leaguePoints,
        'currentStreak': value.currentStreak,
    };
}

