Resources:
  MyVpcF9F0CA6F:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/Resource
  MyVpcPublicSubnet1SubnetF6608456:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2a
      CidrBlock: 10.0.0.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PublicSubnet1
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet1/Subnet
  MyVpcPublicSubnet1RouteTableC46AB2F4:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PublicSubnet1
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet1/RouteTable
  MyVpcPublicSubnet1RouteTableAssociation2ECEE1CB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet1RouteTableC46AB2F4
      SubnetId:
        Ref: MyVpcPublicSubnet1SubnetF6608456
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet1/RouteTableAssociation
  MyVpcPublicSubnet1DefaultRoute95FDF9EB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
      RouteTableId:
        Ref: MyVpcPublicSubnet1RouteTableC46AB2F4
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet1/DefaultRoute
  MyVpcPublicSubnet1EIP096967CB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet1/EIP
  MyVpcPublicSubnet1NATGatewayAD3400C1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcPublicSubnet1EIP096967CB
          - AllocationId
      SubnetId:
        Ref: MyVpcPublicSubnet1SubnetF6608456
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PublicSubnet1
    DependsOn:
      - MyVpcPublicSubnet1DefaultRoute95FDF9EB
      - MyVpcPublicSubnet1RouteTableAssociation2ECEE1CB
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet1/NATGateway
  MyVpcPublicSubnet2Subnet492B6BFB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2b
      CidrBlock: 10.0.32.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PublicSubnet2
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet2/Subnet
  MyVpcPublicSubnet2RouteTable1DF17386:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PublicSubnet2
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet2/RouteTable
  MyVpcPublicSubnet2RouteTableAssociation227DE78D:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet2RouteTable1DF17386
      SubnetId:
        Ref: MyVpcPublicSubnet2Subnet492B6BFB
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet2/RouteTableAssociation
  MyVpcPublicSubnet2DefaultRoute052936F6:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
      RouteTableId:
        Ref: MyVpcPublicSubnet2RouteTable1DF17386
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet2/DefaultRoute
  MyVpcPublicSubnet2EIP8CCBA239:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet2/EIP
  MyVpcPublicSubnet2NATGateway91BFBEC9:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcPublicSubnet2EIP8CCBA239
          - AllocationId
      SubnetId:
        Ref: MyVpcPublicSubnet2Subnet492B6BFB
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PublicSubnet2
    DependsOn:
      - MyVpcPublicSubnet2DefaultRoute052936F6
      - MyVpcPublicSubnet2RouteTableAssociation227DE78D
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet2/NATGateway
  MyVpcPublicSubnet3Subnet57EEE236:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2c
      CidrBlock: 10.0.64.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PublicSubnet3
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet3/Subnet
  MyVpcPublicSubnet3RouteTable15028F08:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PublicSubnet3
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet3/RouteTable
  MyVpcPublicSubnet3RouteTableAssociation5C27DDA4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPublicSubnet3RouteTable15028F08
      SubnetId:
        Ref: MyVpcPublicSubnet3Subnet57EEE236
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet3/RouteTableAssociation
  MyVpcPublicSubnet3DefaultRoute3A83AB36:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVpcIGW5C4A4F63
      RouteTableId:
        Ref: MyVpcPublicSubnet3RouteTable15028F08
    DependsOn:
      - MyVpcVPCGW488ACE0D
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet3/DefaultRoute
  MyVpcPublicSubnet3EIPC5ACADAB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PublicSubnet3
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet3/EIP
  MyVpcPublicSubnet3NATGatewayD4B50EBE:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyVpcPublicSubnet3EIPC5ACADAB
          - AllocationId
      SubnetId:
        Ref: MyVpcPublicSubnet3Subnet57EEE236
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PublicSubnet3
    DependsOn:
      - MyVpcPublicSubnet3DefaultRoute3A83AB36
      - MyVpcPublicSubnet3RouteTableAssociation5C27DDA4
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PublicSubnet3/NATGateway
  MyVpcPrivateSubnet1Subnet5057CF7E:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2a
      CidrBlock: 10.0.96.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PrivateSubnet1
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PrivateSubnet1/Subnet
  MyVpcPrivateSubnet1RouteTable8819E6E2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PrivateSubnet1
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PrivateSubnet1/RouteTable
  MyVpcPrivateSubnet1RouteTableAssociation56D38C7E:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet1RouteTable8819E6E2
      SubnetId:
        Ref: MyVpcPrivateSubnet1Subnet5057CF7E
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PrivateSubnet1/RouteTableAssociation
  MyVpcPrivateSubnet1DefaultRouteA8CDE2FA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcPublicSubnet1NATGatewayAD3400C1
      RouteTableId:
        Ref: MyVpcPrivateSubnet1RouteTable8819E6E2
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PrivateSubnet1/DefaultRoute
  MyVpcPrivateSubnet2Subnet0040C983:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2b
      CidrBlock: 10.0.128.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PrivateSubnet2
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PrivateSubnet2/Subnet
  MyVpcPrivateSubnet2RouteTableCEDCEECE:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PrivateSubnet2
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PrivateSubnet2/RouteTable
  MyVpcPrivateSubnet2RouteTableAssociation86A610DA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet2RouteTableCEDCEECE
      SubnetId:
        Ref: MyVpcPrivateSubnet2Subnet0040C983
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PrivateSubnet2/RouteTableAssociation
  MyVpcPrivateSubnet2DefaultRoute9CE96294:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcPublicSubnet2NATGateway91BFBEC9
      RouteTableId:
        Ref: MyVpcPrivateSubnet2RouteTableCEDCEECE
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PrivateSubnet2/DefaultRoute
  MyVpcPrivateSubnet3Subnet772D6AD7:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2c
      CidrBlock: 10.0.160.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PrivateSubnet3
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PrivateSubnet3/Subnet
  MyVpcPrivateSubnet3RouteTableB790927C:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc/PrivateSubnet3
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PrivateSubnet3/RouteTable
  MyVpcPrivateSubnet3RouteTableAssociationD951741C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVpcPrivateSubnet3RouteTableB790927C
      SubnetId:
        Ref: MyVpcPrivateSubnet3Subnet772D6AD7
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PrivateSubnet3/RouteTableAssociation
  MyVpcPrivateSubnet3DefaultRouteEC11C0C5:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyVpcPublicSubnet3NATGatewayD4B50EBE
      RouteTableId:
        Ref: MyVpcPrivateSubnet3RouteTableB790927C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/PrivateSubnet3/DefaultRoute
  MyVpcIGW5C4A4F63:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/MyVpc
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/IGW
  MyVpcVPCGW488ACE0D:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: MyVpcIGW5C4A4F63
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/VPCGW
  MyVpcRestrictDefaultSecurityGroupCustomResourceA4FCCD62:
    Type: Custom::VpcRestrictDefaultSG
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E
          - Arn
      DefaultSecurityGroupId:
        Fn::GetAtt:
          - MyVpcF9F0CA6F
          - DefaultSecurityGroup
      Account: "789658303834"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MyVpc/RestrictDefaultSecurityGroupCustomResource/Default
  CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                Resource:
                  - Fn::Join:
                      - ""
                      - - arn:aws:ec2:us-east-2:789658303834:security-group/
                        - Fn::GetAtt:
                            - MyVpcF9F0CA6F
                            - DefaultSecurityGroup
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role
  CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-789658303834-us-east-2
        S3Key: 7f18a11296f35510ee16538afec983ed6312e12afbf81b777089a9f8e34e2474.zip
      Timeout: 900
      MemorySize: 128
      Handler: __entrypoint__.handler
      Role:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
          - Arn
      Runtime: nodejs18.x
      Description: Lambda function for removing all inbound/outbound rules from the VPC default security group
    DependsOn:
      - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler
      aws:asset:path: asset.7f18a11296f35510ee16538afec983ed6312e12afbf81b777089a9f8e34e2474
      aws:asset:property: Code
  RiotApiSecret70E7C139:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString: {}
      Name: RIOT_API
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/RiotApiSecret/Resource
  Ec2SecurityGroup55889913:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EC2 instance
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 24.17.176.100/32
          Description: Allow SSH access from my IP
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/Ec2SecurityGroup/Resource
  RdsSecurityGroup632A77E4:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow whitelisted IP to access port 5432
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MyVpcF9F0CA6F
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/RdsSecurityGroup/Resource
  RdsSecurityGroupfromBakeryLeaderboardStackEc2SecurityGroupCBCADA0D5432FE156F9D:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow postgres traffic from EC2 SG
      FromPort: 5432
      GroupId:
        Fn::GetAtt:
          - RdsSecurityGroup632A77E4
          - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
          - Ec2SecurityGroup55889913
          - GroupId
      ToPort: 5432
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/RdsSecurityGroup/from BakeryLeaderboardStackEc2SecurityGroupCBCADA0D:5432
  RdsSecurityGroupfromBakeryLeaderboardStackSummonerSourceLambdaSecurityGroup4D121726IndirectPortAA6F8308:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: from BakeryLeaderboardStackSummonerSourceLambdaSecurityGroup4D121726:{IndirectPort}
      FromPort:
        Fn::GetAtt:
          - BakeryLeaderboardDatabase5E4ABA2D
          - Endpoint.Port
      GroupId:
        Fn::GetAtt:
          - RdsSecurityGroup632A77E4
          - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SummonerSourceLambdaSecurityGroup6F556347
          - GroupId
      ToPort:
        Fn::GetAtt:
          - BakeryLeaderboardDatabase5E4ABA2D
          - Endpoint.Port
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/RdsSecurityGroup/from BakeryLeaderboardStackSummonerSourceLambdaSecurityGroup4D121726:{IndirectPort}
  RdsSecurityGroupfromBakeryLeaderboardStackSourceMatchesLambdaSecurityGroup4D27F546IndirectPort2CCDCC24:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: from BakeryLeaderboardStackSourceMatchesLambdaSecurityGroup4D27F546:{IndirectPort}
      FromPort:
        Fn::GetAtt:
          - BakeryLeaderboardDatabase5E4ABA2D
          - Endpoint.Port
      GroupId:
        Fn::GetAtt:
          - RdsSecurityGroup632A77E4
          - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SourceMatchesLambdaSecurityGroup645571FC
          - GroupId
      ToPort:
        Fn::GetAtt:
          - BakeryLeaderboardDatabase5E4ABA2D
          - Endpoint.Port
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/RdsSecurityGroup/from BakeryLeaderboardStackSourceMatchesLambdaSecurityGroup4D27F546:{IndirectPort}
  RdsSecurityGroupfromBakeryLeaderboardStackCheckMatchExistenceLambdaSecurityGroup6E45D5B4IndirectPortFF5B30C4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: from BakeryLeaderboardStackCheckMatchExistenceLambdaSecurityGroup6E45D5B4:{IndirectPort}
      FromPort:
        Fn::GetAtt:
          - BakeryLeaderboardDatabase5E4ABA2D
          - Endpoint.Port
      GroupId:
        Fn::GetAtt:
          - RdsSecurityGroup632A77E4
          - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
          - CheckMatchExistenceLambdaSecurityGroup54D464E3
          - GroupId
      ToPort:
        Fn::GetAtt:
          - BakeryLeaderboardDatabase5E4ABA2D
          - Endpoint.Port
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/RdsSecurityGroup/from BakeryLeaderboardStackCheckMatchExistenceLambdaSecurityGroup6E45D5B4:{IndirectPort}
  RdsSecurityGroupfromBakeryLeaderboardStackFetchAndInsertMatchDataLambdaSecurityGroup3F9929FBIndirectPortF05CC9F0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: from BakeryLeaderboardStackFetchAndInsertMatchDataLambdaSecurityGroup3F9929FB:{IndirectPort}
      FromPort:
        Fn::GetAtt:
          - BakeryLeaderboardDatabase5E4ABA2D
          - Endpoint.Port
      GroupId:
        Fn::GetAtt:
          - RdsSecurityGroup632A77E4
          - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
          - FetchAndInsertMatchDataLambdaSecurityGroup0D057C87
          - GroupId
      ToPort:
        Fn::GetAtt:
          - BakeryLeaderboardDatabase5E4ABA2D
          - Endpoint.Port
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/RdsSecurityGroup/from BakeryLeaderboardStackFetchAndInsertMatchDataLambdaSecurityGroup3F9929FB:{IndirectPort}
  RdsSecurityGroupfromBakeryLeaderboardStackSyncSummonerStatsLambdaSecurityGroup6B02BBB6IndirectPortB221D0FC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: from BakeryLeaderboardStackSyncSummonerStatsLambdaSecurityGroup6B02BBB6:{IndirectPort}
      FromPort:
        Fn::GetAtt:
          - BakeryLeaderboardDatabase5E4ABA2D
          - Endpoint.Port
      GroupId:
        Fn::GetAtt:
          - RdsSecurityGroup632A77E4
          - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SyncSummonerStatsLambdaSecurityGroupE0C0B440
          - GroupId
      ToPort:
        Fn::GetAtt:
          - BakeryLeaderboardDatabase5E4ABA2D
          - Endpoint.Port
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/RdsSecurityGroup/from BakeryLeaderboardStackSyncSummonerStatsLambdaSecurityGroup6B02BBB6:{IndirectPort}
  RdsSecurityGroupfromBakeryLeaderboardStackSyncSummonerStatsFromScratchLambdaSecurityGroup7B0EF880IndirectPort549610F3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: from BakeryLeaderboardStackSyncSummonerStatsFromScratchLambdaSecurityGroup7B0EF880:{IndirectPort}
      FromPort:
        Fn::GetAtt:
          - BakeryLeaderboardDatabase5E4ABA2D
          - Endpoint.Port
      GroupId:
        Fn::GetAtt:
          - RdsSecurityGroup632A77E4
          - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SyncSummonerStatsFromScratchLambdaSecurityGroupE28C328B
          - GroupId
      ToPort:
        Fn::GetAtt:
          - BakeryLeaderboardDatabase5E4ABA2D
          - Endpoint.Port
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/RdsSecurityGroup/from BakeryLeaderboardStackSyncSummonerStatsFromScratchLambdaSecurityGroup7B0EF880:{IndirectPort}
  DatabaseProxyInstanceInstanceRole7AC61EFB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/DatabaseProxyInstance
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/DatabaseProxyInstance/InstanceRole/Resource
  DatabaseProxyInstanceInstanceProfile0DA2E8B3:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: DatabaseProxyInstanceInstanceRole7AC61EFB
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/DatabaseProxyInstance/InstanceProfile
  DatabaseProxyInstance13AE1AF4:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-2a
      IamInstanceProfile:
        Ref: DatabaseProxyInstanceInstanceProfile0DA2E8B3
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t2.micro
      KeyName: qusai-us-east-2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - Fn::GetAtt:
                - Ec2SecurityGroup55889913
                - GroupId
          SubnetId:
            Ref: MyVpcPublicSubnet1SubnetF6608456
      Tags:
        - Key: Name
          Value: BakeryLeaderboardStack/DatabaseProxyInstance
      UserData:
        Fn::Base64: "#!/bin/bash"
    DependsOn:
      - DatabaseProxyInstanceInstanceRole7AC61EFB
      - MyVpcPublicSubnet1DefaultRoute95FDF9EB
      - MyVpcPublicSubnet1RouteTableAssociation2ECEE1CB
      - MyVpcPublicSubnet2DefaultRoute052936F6
      - MyVpcPublicSubnet2RouteTableAssociation227DE78D
      - MyVpcPublicSubnet3DefaultRoute3A83AB36
      - MyVpcPublicSubnet3RouteTableAssociation5C27DDA4
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/DatabaseProxyInstance/Resource
  BakeryLeaderboardDatabaseSubnets5964FAE1:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for BakeryLeaderboardDatabase database
      SubnetIds:
        - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
        - Ref: MyVpcPrivateSubnet2Subnet0040C983
        - Ref: MyVpcPrivateSubnet3Subnet772D6AD7
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/BakeryLeaderboardDatabase/Subnets/Default
  BakeryLeaderboardStackBakeryLeaderboardDatabaseSecretAD78CD053fdaad7efa858a3daf9490cf0a702aeb:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description:
        Fn::Join:
          - ""
          - - "Generated by the CDK for stack: "
            - Ref: AWS::StackName
      GenerateSecretString:
        ExcludeCharacters: " %+~`#$&*()|[]{}:;<>?!'/@\"\\"
        GenerateStringKey: password
        PasswordLength: 30
        SecretStringTemplate: '{"username":"qusai"}'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/BakeryLeaderboardDatabase/Secret/Resource
  BakeryLeaderboardDatabaseSecretAttachment2E68FFA9:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: BakeryLeaderboardStackBakeryLeaderboardDatabaseSecretAD78CD053fdaad7efa858a3daf9490cf0a702aeb
      TargetId:
        Ref: BakeryLeaderboardDatabase5E4ABA2D
      TargetType: AWS::RDS::DBCluster
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/BakeryLeaderboardDatabase/Secret/Attachment/Resource
  BakeryLeaderboardDatabase5E4ABA2D:
    Type: AWS::RDS::DBCluster
    Properties:
      CopyTagsToSnapshot: true
      DBClusterParameterGroupName: default.aurora-postgresql15
      DBSubnetGroupName:
        Ref: BakeryLeaderboardDatabaseSubnets5964FAE1
      DatabaseName: BakeryLeaderboard
      Engine: aurora-postgresql
      EngineVersion: "15.3"
      MasterUserPassword:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: BakeryLeaderboardStackBakeryLeaderboardDatabaseSecretAD78CD053fdaad7efa858a3daf9490cf0a702aeb
            - :SecretString:password::}}
      MasterUsername: qusai
      Port: 5432
      ServerlessV2ScalingConfiguration:
        MaxCapacity: 2
        MinCapacity: 0.5
      VpcSecurityGroupIds:
        - Fn::GetAtt:
            - RdsSecurityGroup632A77E4
            - GroupId
    UpdateReplacePolicy: Snapshot
    DeletionPolicy: Snapshot
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/BakeryLeaderboardDatabase/Resource
  BakeryLeaderboardDatabaseWriter43665195:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier:
        Ref: BakeryLeaderboardDatabase5E4ABA2D
      DBInstanceClass: db.t3.medium
      Engine: aurora-postgresql
      PromotionTier: 0
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/BakeryLeaderboardDatabase/Writer/Resource
  BakeryLeaderboardDatabaseReader14BA73FFF:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier:
        Ref: BakeryLeaderboardDatabase5E4ABA2D
      DBInstanceClass: db.serverless
      Engine: aurora-postgresql
      PromotionTier: 1
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/BakeryLeaderboardDatabase/Reader1/Resource
  SummonerSourceLambdaServiceRole063D76E3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SummonerSourceLambda/ServiceRole/Resource
  SummonerSourceLambdaServiceRoleDefaultPolicy59A69252:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
              - Ref: BakeryLeaderboardDatabaseSecretAttachment2E68FFA9
              - Ref: RiotApiSecret70E7C139
        Version: "2012-10-17"
      PolicyName: SummonerSourceLambdaServiceRoleDefaultPolicy59A69252
      Roles:
        - Ref: SummonerSourceLambdaServiceRole063D76E3
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SummonerSourceLambda/ServiceRole/DefaultPolicy/Resource
  SummonerSourceLambdaSecurityGroup6F556347:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function BakeryLeaderboardStackSummonerSourceLambdaA739A95C
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MyVpcF9F0CA6F
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SummonerSourceLambda/SecurityGroup/Resource
  SummonerSourceLambdaEA9E4A38:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-789658303834-us-east-2
        S3Key: ee805904124b6b047a672934521e9d5897c6c30a1a87a6c795cfde52631d23bd.zip
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          RIOT_API_SECRET:
            Ref: RiotApiSecret70E7C139
          DB_SECRET:
            Ref: BakeryLeaderboardDatabaseSecretAttachment2E68FFA9
          NODE_ENV: development
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SummonerSourceLambdaServiceRole063D76E3
          - Arn
      Runtime: nodejs18.x
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - SummonerSourceLambdaSecurityGroup6F556347
              - GroupId
        SubnetIds:
          - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
          - Ref: MyVpcPrivateSubnet2Subnet0040C983
          - Ref: MyVpcPrivateSubnet3Subnet772D6AD7
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
      - SummonerSourceLambdaServiceRoleDefaultPolicy59A69252
      - SummonerSourceLambdaServiceRole063D76E3
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SummonerSourceLambda/Resource
      aws:asset:path: asset.ee805904124b6b047a672934521e9d5897c6c30a1a87a6c795cfde52631d23bd
      aws:asset:is-bundled: true
      aws:asset:property: Code
  SourceMatchesLambdaServiceRoleEF9474EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SourceMatchesLambda/ServiceRole/Resource
  SourceMatchesLambdaServiceRoleDefaultPolicyE9538FCB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SummonerMatchFetchRequestQueue322870BA
                - Arn
          - Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
              Ref: BakeryLeaderboardDatabaseSecretAttachment2E68FFA9
        Version: "2012-10-17"
      PolicyName: SourceMatchesLambdaServiceRoleDefaultPolicyE9538FCB
      Roles:
        - Ref: SourceMatchesLambdaServiceRoleEF9474EC
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SourceMatchesLambda/ServiceRole/DefaultPolicy/Resource
  SourceMatchesLambdaSecurityGroup645571FC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function BakeryLeaderboardStackSourceMatchesLambda12AA7648
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MyVpcF9F0CA6F
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SourceMatchesLambda/SecurityGroup/Resource
  SourceMatchesLambda341ADEAE:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-789658303834-us-east-2
        S3Key: 30ba1959cff486601bb0bb800dd530b4eedd2da00317dc208cf02b29cf39bf4a.zip
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          SUMMONER_MATCH_FETCH_REQUEST_QUEUE_URL:
            Ref: SummonerMatchFetchRequestQueue322870BA
          DB_SECRET:
            Ref: BakeryLeaderboardDatabaseSecretAttachment2E68FFA9
          NODE_ENV: development
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SourceMatchesLambdaServiceRoleEF9474EC
          - Arn
      Runtime: nodejs18.x
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - SourceMatchesLambdaSecurityGroup645571FC
              - GroupId
        SubnetIds:
          - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
          - Ref: MyVpcPrivateSubnet2Subnet0040C983
          - Ref: MyVpcPrivateSubnet3Subnet772D6AD7
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
      - SourceMatchesLambdaServiceRoleDefaultPolicyE9538FCB
      - SourceMatchesLambdaServiceRoleEF9474EC
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SourceMatchesLambda/Resource
      aws:asset:path: asset.30ba1959cff486601bb0bb800dd530b4eedd2da00317dc208cf02b29cf39bf4a
      aws:asset:is-bundled: true
      aws:asset:property: Code
  GetMatchIdsForSummonerLambdaServiceRoleF7735954:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/GetMatchIdsForSummonerLambda/ServiceRole/Resource
  GetMatchIdsForSummonerLambdaServiceRoleDefaultPolicy5453D721:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - MatchIdProcessingQueueD3932FF5
                - Arn
          - Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SummonerMatchFetchRequestQueue322870BA
                - Arn
          - Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
              Ref: RiotApiSecret70E7C139
        Version: "2012-10-17"
      PolicyName: GetMatchIdsForSummonerLambdaServiceRoleDefaultPolicy5453D721
      Roles:
        - Ref: GetMatchIdsForSummonerLambdaServiceRoleF7735954
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/GetMatchIdsForSummonerLambda/ServiceRole/DefaultPolicy/Resource
  GetMatchIdsForSummonerLambdaSecurityGroupDF80B78C:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function BakeryLeaderboardStackGetMatchIdsForSummonerLambdaF6CA02D2
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MyVpcF9F0CA6F
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/GetMatchIdsForSummonerLambda/SecurityGroup/Resource
  GetMatchIdsForSummonerLambda80435008:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-789658303834-us-east-2
        S3Key: 368789eeb71ef6edcd222724aeceead071b7f557b47d4dc939d8abf0e9eb6084.zip
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          FETCH_MATCH_QUEUE_URL:
            Ref: MatchIdProcessingQueueD3932FF5
          RIOT_API_SECRET:
            Ref: RiotApiSecret70E7C139
          NODE_ENV: development
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - GetMatchIdsForSummonerLambdaServiceRoleF7735954
          - Arn
      Runtime: nodejs18.x
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - GetMatchIdsForSummonerLambdaSecurityGroupDF80B78C
              - GroupId
        SubnetIds:
          - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
          - Ref: MyVpcPrivateSubnet2Subnet0040C983
          - Ref: MyVpcPrivateSubnet3Subnet772D6AD7
    DependsOn:
      - GetMatchIdsForSummonerLambdaServiceRoleDefaultPolicy5453D721
      - GetMatchIdsForSummonerLambdaServiceRoleF7735954
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/GetMatchIdsForSummonerLambda/Resource
      aws:asset:path: asset.368789eeb71ef6edcd222724aeceead071b7f557b47d4dc939d8abf0e9eb6084
      aws:asset:is-bundled: true
      aws:asset:property: Code
  GetMatchIdsForSummonerLambdaSqsEventSourceBakeryLeaderboardStackSummonerMatchFetchRequestQueue70C935A4E1C702A4:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
          - SummonerMatchFetchRequestQueue322870BA
          - Arn
      FunctionName:
        Ref: GetMatchIdsForSummonerLambda80435008
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/GetMatchIdsForSummonerLambda/SqsEventSource:BakeryLeaderboardStackSummonerMatchFetchRequestQueue70C935A4/Resource
  SummonerMatchFetchRequestDlq9AD35F4D:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SummonerMatchFetchRequestDlq/Resource
  SummonerMatchFetchRequestQueue322870BA:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - SummonerMatchFetchRequestDlq9AD35F4D
            - Arn
        maxReceiveCount: 5
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SummonerMatchFetchRequestQueue/Resource
  MatchIdProcessingDlqDE9EAD22:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MatchIdProcessingDlq/Resource
  MatchIdProcessingQueueD3932FF5:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - MatchIdProcessingDlqDE9EAD22
            - Arn
        maxReceiveCount: 5
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MatchIdProcessingQueue/Resource
  CheckMatchExistenceLambdaServiceRole09054865:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/CheckMatchExistenceLambda/ServiceRole/Resource
  CheckMatchExistenceLambdaServiceRoleDefaultPolicyD6CC7DAA:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
              Ref: BakeryLeaderboardDatabaseSecretAttachment2E68FFA9
        Version: "2012-10-17"
      PolicyName: CheckMatchExistenceLambdaServiceRoleDefaultPolicyD6CC7DAA
      Roles:
        - Ref: CheckMatchExistenceLambdaServiceRole09054865
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/CheckMatchExistenceLambda/ServiceRole/DefaultPolicy/Resource
  CheckMatchExistenceLambdaSecurityGroup54D464E3:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function BakeryLeaderboardStackCheckMatchExistenceLambda4638025B
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MyVpcF9F0CA6F
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/CheckMatchExistenceLambda/SecurityGroup/Resource
  CheckMatchExistenceLambda17FD01AF:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-789658303834-us-east-2
        S3Key: c291ddd8fcd4125cd7dcde2e92677bb59dd1329a3a2343c08872629fc4b99d31.zip
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          DB_SECRET:
            Ref: BakeryLeaderboardDatabaseSecretAttachment2E68FFA9
          NODE_ENV: development
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CheckMatchExistenceLambdaServiceRole09054865
          - Arn
      Runtime: nodejs18.x
      Timeout: 10
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - CheckMatchExistenceLambdaSecurityGroup54D464E3
              - GroupId
        SubnetIds:
          - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
          - Ref: MyVpcPrivateSubnet2Subnet0040C983
          - Ref: MyVpcPrivateSubnet3Subnet772D6AD7
    DependsOn:
      - CheckMatchExistenceLambdaServiceRoleDefaultPolicyD6CC7DAA
      - CheckMatchExistenceLambdaServiceRole09054865
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/CheckMatchExistenceLambda/Resource
      aws:asset:path: asset.c291ddd8fcd4125cd7dcde2e92677bb59dd1329a3a2343c08872629fc4b99d31
      aws:asset:is-bundled: true
      aws:asset:property: Code
  FetchAndInsertMatchDataLambdaServiceRoleF9BB2111:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/FetchAndInsertMatchDataLambda/ServiceRole/Resource
  FetchAndInsertMatchDataLambdaServiceRoleDefaultPolicyB6175855:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - SyncSummonerStatsLambda5210D915
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - SyncSummonerStatsLambda5210D915
                        - Arn
                    - :*
          - Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
              - Ref: BakeryLeaderboardDatabaseSecretAttachment2E68FFA9
              - Ref: RiotApiSecret70E7C139
        Version: "2012-10-17"
      PolicyName: FetchAndInsertMatchDataLambdaServiceRoleDefaultPolicyB6175855
      Roles:
        - Ref: FetchAndInsertMatchDataLambdaServiceRoleF9BB2111
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/FetchAndInsertMatchDataLambda/ServiceRole/DefaultPolicy/Resource
  FetchAndInsertMatchDataLambdaSecurityGroup0D057C87:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function BakeryLeaderboardStackFetchAndInsertMatchDataLambda2D181ED6
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MyVpcF9F0CA6F
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/FetchAndInsertMatchDataLambda/SecurityGroup/Resource
  FetchAndInsertMatchDataLambda39A2EA66:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-789658303834-us-east-2
        S3Key: 2e2ec5699addac0f5f76a646964a0846d12d6e401ac289970df8be5e4896cc1d.zip
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          SYNC_SUMMONER_STATS_LAMBDA_ARN:
            Fn::GetAtt:
              - SyncSummonerStatsLambda5210D915
              - Arn
          RIOT_API_SECRET:
            Ref: RiotApiSecret70E7C139
          DB_SECRET:
            Ref: BakeryLeaderboardDatabaseSecretAttachment2E68FFA9
          NODE_ENV: development
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - FetchAndInsertMatchDataLambdaServiceRoleF9BB2111
          - Arn
      Runtime: nodejs18.x
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - FetchAndInsertMatchDataLambdaSecurityGroup0D057C87
              - GroupId
        SubnetIds:
          - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
          - Ref: MyVpcPrivateSubnet2Subnet0040C983
          - Ref: MyVpcPrivateSubnet3Subnet772D6AD7
    DependsOn:
      - FetchAndInsertMatchDataLambdaServiceRoleDefaultPolicyB6175855
      - FetchAndInsertMatchDataLambdaServiceRoleF9BB2111
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/FetchAndInsertMatchDataLambda/Resource
      aws:asset:path: asset.2e2ec5699addac0f5f76a646964a0846d12d6e401ac289970df8be5e4896cc1d
      aws:asset:is-bundled: true
      aws:asset:property: Code
  MatchSourceStateMachineRoleD09F75E7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: states.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MatchSourceStateMachine/Role/Resource
  MatchSourceStateMachineRoleDefaultPolicy6394FA99:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - CheckMatchExistenceLambda17FD01AF
                  - Arn
              - Fn::GetAtt:
                  - FetchAndInsertMatchDataLambda39A2EA66
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - CheckMatchExistenceLambda17FD01AF
                        - Arn
                    - :*
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - FetchAndInsertMatchDataLambda39A2EA66
                        - Arn
                    - :*
        Version: "2012-10-17"
      PolicyName: MatchSourceStateMachineRoleDefaultPolicy6394FA99
      Roles:
        - Ref: MatchSourceStateMachineRoleD09F75E7
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MatchSourceStateMachine/Role/DefaultPolicy/Resource
  MatchSourceStateMachine95C9A812:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Join:
          - ""
          - - '{"StartAt":"CheckIfMatchExistsInvocation","States":{"CheckIfMatchExistsInvocation":{"Next":"DoesMatchExistChoice","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["States.ALL"],"IntervalSeconds":10,"MaxAttempts":3,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - CheckMatchExistenceLambda17FD01AF
                - Arn
            - '","Payload.$":"$"}},"DoesMatchExistChoice":{"Type":"Choice","Choices":[{"Variable":"$.doesMatchExist","BooleanEquals":false,"Next":"FetchMatchAndInsertInvocation"}]},"FetchMatchAndInsertInvocation":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["States.ALL"],"IntervalSeconds":10,"MaxAttempts":3,"BackoffRate":2}],"Type":"Task","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - FetchAndInsertMatchDataLambda39A2EA66
                - Arn
            - '","Payload.$":"$"}}}}'
      RoleArn:
        Fn::GetAtt:
          - MatchSourceStateMachineRoleD09F75E7
          - Arn
    DependsOn:
      - MatchSourceStateMachineRoleDefaultPolicy6394FA99
      - MatchSourceStateMachineRoleD09F75E7
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MatchSourceStateMachine/Resource
  MatchSourceStateMachineTriggerLambdaServiceRole64F75D7E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MatchSourceStateMachineTriggerLambda/ServiceRole/Resource
  MatchSourceStateMachineTriggerLambdaServiceRoleDefaultPolicy68F51107:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - MatchIdProcessingQueueD3932FF5
                - Arn
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Ref: MatchSourceStateMachine95C9A812
        Version: "2012-10-17"
      PolicyName: MatchSourceStateMachineTriggerLambdaServiceRoleDefaultPolicy68F51107
      Roles:
        - Ref: MatchSourceStateMachineTriggerLambdaServiceRole64F75D7E
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MatchSourceStateMachineTriggerLambda/ServiceRole/DefaultPolicy/Resource
  MatchSourceStateMachineTriggerLambdaSecurityGroupAE7FE3DB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function BakeryLeaderboardStackMatchSourceStateMachineTriggerLambda2A922CA8
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MyVpcF9F0CA6F
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MatchSourceStateMachineTriggerLambda/SecurityGroup/Resource
  MatchSourceStateMachineTriggerLambda75065333:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-789658303834-us-east-2
        S3Key: 2eea831163be95b9d4d05178f07d86cc218766c386505e64e1001f012af0ed1b.zip
      Environment:
        Variables:
          STATE_MACHINE_ARN:
            Ref: MatchSourceStateMachine95C9A812
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_ENV: development
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - MatchSourceStateMachineTriggerLambdaServiceRole64F75D7E
          - Arn
      Runtime: nodejs18.x
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - MatchSourceStateMachineTriggerLambdaSecurityGroupAE7FE3DB
              - GroupId
        SubnetIds:
          - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
          - Ref: MyVpcPrivateSubnet2Subnet0040C983
          - Ref: MyVpcPrivateSubnet3Subnet772D6AD7
    DependsOn:
      - MatchSourceStateMachineTriggerLambdaServiceRoleDefaultPolicy68F51107
      - MatchSourceStateMachineTriggerLambdaServiceRole64F75D7E
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MatchSourceStateMachineTriggerLambda/Resource
      aws:asset:path: asset.2eea831163be95b9d4d05178f07d86cc218766c386505e64e1001f012af0ed1b
      aws:asset:is-bundled: true
      aws:asset:property: Code
  MatchSourceStateMachineTriggerLambdaSqsEventSourceBakeryLeaderboardStackMatchIdProcessingQueueCF2189E8E066490E:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
          - MatchIdProcessingQueueD3932FF5
          - Arn
      FunctionName:
        Ref: MatchSourceStateMachineTriggerLambda75065333
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/MatchSourceStateMachineTriggerLambda/SqsEventSource:BakeryLeaderboardStackMatchIdProcessingQueueCF2189E8/Resource
  SyncSummonerStatsLambdaServiceRoleFCBA71AA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SyncSummonerStatsLambda/ServiceRole/Resource
  SyncSummonerStatsLambdaServiceRoleDefaultPolicy6C2A41E9:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
              - Ref: BakeryLeaderboardDatabaseSecretAttachment2E68FFA9
              - Ref: RiotApiSecret70E7C139
        Version: "2012-10-17"
      PolicyName: SyncSummonerStatsLambdaServiceRoleDefaultPolicy6C2A41E9
      Roles:
        - Ref: SyncSummonerStatsLambdaServiceRoleFCBA71AA
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SyncSummonerStatsLambda/ServiceRole/DefaultPolicy/Resource
  SyncSummonerStatsLambdaSecurityGroupE0C0B440:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function BakeryLeaderboardStackSyncSummonerStatsLambdaF249201C
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MyVpcF9F0CA6F
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SyncSummonerStatsLambda/SecurityGroup/Resource
  SyncSummonerStatsLambda5210D915:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-789658303834-us-east-2
        S3Key: f971566d655f6df82ed5b6f509d72afc5e29c5872c67109eda81b18d2424f21a.zip
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          RIOT_API_SECRET:
            Ref: RiotApiSecret70E7C139
          DB_SECRET:
            Ref: BakeryLeaderboardDatabaseSecretAttachment2E68FFA9
          NODE_ENV: development
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SyncSummonerStatsLambdaServiceRoleFCBA71AA
          - Arn
      Runtime: nodejs18.x
      Timeout: 10
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - SyncSummonerStatsLambdaSecurityGroupE0C0B440
              - GroupId
        SubnetIds:
          - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
          - Ref: MyVpcPrivateSubnet2Subnet0040C983
          - Ref: MyVpcPrivateSubnet3Subnet772D6AD7
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
      - SyncSummonerStatsLambdaServiceRoleDefaultPolicy6C2A41E9
      - SyncSummonerStatsLambdaServiceRoleFCBA71AA
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SyncSummonerStatsLambda/Resource
      aws:asset:path: asset.f971566d655f6df82ed5b6f509d72afc5e29c5872c67109eda81b18d2424f21a
      aws:asset:is-bundled: true
      aws:asset:property: Code
  SyncSummonerStatsFromScratchLambdaServiceRole0CA6C4FE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SyncSummonerStatsFromScratchLambda/ServiceRole/Resource
  SyncSummonerStatsFromScratchLambdaServiceRoleDefaultPolicy754983AB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
              - Ref: BakeryLeaderboardDatabaseSecretAttachment2E68FFA9
              - Ref: RiotApiSecret70E7C139
        Version: "2012-10-17"
      PolicyName: SyncSummonerStatsFromScratchLambdaServiceRoleDefaultPolicy754983AB
      Roles:
        - Ref: SyncSummonerStatsFromScratchLambdaServiceRole0CA6C4FE
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SyncSummonerStatsFromScratchLambda/ServiceRole/DefaultPolicy/Resource
  SyncSummonerStatsFromScratchLambdaSecurityGroupE28C328B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function BakeryLeaderboardStackSyncSummonerStatsFromScratchLambda59A6E215
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MyVpcF9F0CA6F
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SyncSummonerStatsFromScratchLambda/SecurityGroup/Resource
  SyncSummonerStatsFromScratchLambda8196691C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-789658303834-us-east-2
        S3Key: fe9e6ced18e745a8b5d81b0fa11f9004239ec51a833e7b17a0124d429cdc2b08.zip
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          RIOT_API_SECRET:
            Ref: RiotApiSecret70E7C139
          DB_SECRET:
            Ref: BakeryLeaderboardDatabaseSecretAttachment2E68FFA9
          NODE_ENV: development
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - SyncSummonerStatsFromScratchLambdaServiceRole0CA6C4FE
          - Arn
      Runtime: nodejs18.x
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - SyncSummonerStatsFromScratchLambdaSecurityGroupE28C328B
              - GroupId
        SubnetIds:
          - Ref: MyVpcPrivateSubnet1Subnet5057CF7E
          - Ref: MyVpcPrivateSubnet2Subnet0040C983
          - Ref: MyVpcPrivateSubnet3Subnet772D6AD7
    DependsOn:
      - MyVpcPrivateSubnet1DefaultRouteA8CDE2FA
      - MyVpcPrivateSubnet1RouteTableAssociation56D38C7E
      - MyVpcPrivateSubnet2DefaultRoute9CE96294
      - MyVpcPrivateSubnet2RouteTableAssociation86A610DA
      - MyVpcPrivateSubnet3DefaultRouteEC11C0C5
      - MyVpcPrivateSubnet3RouteTableAssociationD951741C
      - SyncSummonerStatsFromScratchLambdaServiceRoleDefaultPolicy754983AB
      - SyncSummonerStatsFromScratchLambdaServiceRole0CA6C4FE
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SyncSummonerStatsFromScratchLambda/Resource
      aws:asset:path: asset.fe9e6ced18e745a8b5d81b0fa11f9004239ec51a833e7b17a0124d429cdc2b08
      aws:asset:is-bundled: true
      aws:asset:property: Code
  SourceMatchesEventBD103A76:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(30 minutes)
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - SourceMatchesLambda341ADEAE
              - Arn
          Id: Target0
          Input: '{"type":"INTERVAL","interval":{"hours":2}}'
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SourceMatchesEvent/Resource
  SourceMatchesEventAllowEventRuleBakeryLeaderboardStackSourceMatchesLambda12AA76488526FB47:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - SourceMatchesLambda341ADEAE
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - SourceMatchesEventBD103A76
          - Arn
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/SourceMatchesEvent/AllowEventRuleBakeryLeaderboardStackSourceMatchesLambda12AA7648
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31TTY+bMBD9Lb07brI9tNd8bFdI7Yomq71Gg5kQB7Cpx2a1Qvz3DiaEtFr1NG+e5/MNPMjVcimXn+CNFiovF5XOZHfwoErB1LFD9SC710aJ7cm8pluRhqzS6hAyg37gZrS3weMLZBXO/MytiazS4LU1t+ABPCbpYJ7BP4HHN3gXqdMtw7lwYjw6xlPAOMnVW3ue9Vyj8eKAKjjt35+cDU2c4b9EYgqHRCIx5MEoHFuNuBeEyqGnGgwU6FiS6F+LDGg0L+AK9HdD3AL+femFhlp2ezvqM9mpY+rsSTOVWpY37jiiXricZLcDDxkQbqtArIYY1bktttvcE1PwPPNuMyVGZ16zgjrL4WhsjheSz9F8D0bFO9GXIxCxCnI9GPblJqgS/YaLX1NlxxVvGY8tb3qwwSn8CU2jTRFv/CGboqs1Eaex2r95x18BQ9QkAiY9NqdrZTp6oJLkj9g0Ma0t8e8AHuRsNZ+RP17PfdRZm/FLvPN7gcMsHLwP1zuw7XuxR4rziS3LZOvZ5YiPn/hgrc5Z0agNNymmvcBBjax1LwZZ5YU+t6tvcvWV/7ILab1wwXhdo9yP9g8IEpesggMAAA==
    Metadata:
      aws:cdk:path: BakeryLeaderboardStack/CDKMetadata/Default
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

